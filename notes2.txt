FlexBox

    gives containers the ability to ...
    expand and shrink Elements
    replaces `float`; more readable and use
    strictly one dimensional


Flex containers 
    to create...
        `display: flex`
    horizontal
        main axis
    vertical 
        cross axis

Properties
    for containers
        flex-direction                  [establishes Current MAIN Axisf]
            row / column / *-reverse    [reverse makes elements for to the END, then reverses]
        flex-wrap                       [creates a newline along the cross axis]
            nowrap / wrap / *-reverse   
        justify-content                 [current MAIN axis]
            flex-start / flex-end
            center / space-between / space-around / space-evenly
        align-items                     [current CROSS axis]
            stretch / flex-start / flex-end / center 
            baseline [ensures all text are aligned]
        align-content 
            stretch / flex-start / flex-end / center 
            space-between / space-around 
            

    for items
        align-self                       [aligns along CROSS axis]
            stretch / flex-start / flex-end / center 
            auto / baseline
        order
            <integer>
        flex-grow                       [1 is maximum]
            <integer>
        flex-shrink                     [1 = allows to shrink // 0 = overflow rather than shrink]
            <non-zero integer>
        flex-basis
            auto | <length>             [percentage vw em]
        flex:
            <grow> <shrink> <basis>

regular
    1
    2
    3
    4
    5
flex   
    1   2   3   4  5



///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
//CSS Grid

Intro
    Grid --> CSS3 module
    Replaces `float`
    Works with FlexBox
    2D version of FlexBox

Methodology
    display -> template -> positioning -> gap
    DTPG

Terminalogy
    Columns 
        vertical grid line
    Row
        horizontal grid line
    containers
        Grid Items referred to by it's top left coordinate
    coordinate  
        composed of intersecting grid line
    gutter
        spacing between coordinate and grid item
    fr
        fractional unit; computes remaining space and divides equally
            100% space; 1fr, 1fr, 1fr -> 33% each
            60% space; 1fr, 1fr, 1fr -> 20% each
        ... use multiple fr for proportionality
            1fr 2fr  ----> 33% for first, 66% for second
            1fr 2fr 2fr -> 20% for first, 40% for second and third
        things to watch out for...
            fr ALWAYS streches out

Steps
    1. declare `grid`
        `display: grid`
    1. declare template
        declare for each unit...
            `grid-template-rows: 33px/em/rem/vw/% 33px/em/rem/vw/% 33px/em/rem/vw/%`
            `grid-template-columns: 33px/em/rem/vw/% 33px/em/rem/vw/% 33px/em/rem/vw/%`
        ... or combine with repeat...
            `grid-template-rows: repeat(3, 33em);`
        ... or use fractional units...
            `grid-template-rows: repeat(3, 1fr);`
    1. declare gap
        declare for each
            `grid-row-gap: 30px;`
            `grid-columns-gap: 30px;`
        ... or combine into one 
            `grid-gap: 30px;`

Positioning
    1. moving item from 1,1 to 2,2
        easy way
            grid-row-start: 2;
            grid-column-start: 2;
            grid-row-end: 3;
            grid-column-end: 3;
        shorthand
            grid-row: 2 / 3;  {think row LINES... NOT POSITIONS}
                want something new?
                    2 / span 2 [does not designate specific grid line; just the number of lines to pass]
            grid-column: 2 / 3;
        ultrashorthand
            grid-area: 2/2/3/3   {row-s / column-s / row-e / column-e}
Spanning
    1. Just add more to the end  [2/2/5/5]
    1. Want to layer an item on top??
        1. add a `z-index: 10`
    1. Want to stretch a unit to the end NO MATTER WHAT?
        1. [2/2/-1/-1]
Challenge [8x8sq] ... or ... [9 x 9] in grid
    Header ...... [1 / 1 / 2 / 9]
    SB 1 ........ [2 / 1 / 4 / 3]
    SB 2 ........ [2 / 3 / 4 / 5]
    SB 3 ........ [2 / 5 / 4 / 7]
    Sidebar ..... [2 / 7 / 8 / 9]
    Main ........ [3 / 1 / 8 / 9]

Custom Grid Line Names
    Defined in the `template`
        Instead of...
            grid-template-rows: 100px 200xp 400xp 100px;
            grid-template-rows: [header-start] 100px [header-end box-start]  200xp [box-end main-start] 400xp [main-end footer-start]  100px  [footer-end];
        Hard work pays off when you can...
            .sidebar {
                grid-row: box-start / main-end;
                ...
            }
        
Custom Grid Area Names
    Defined in the `template`
        Instead of...
            grid-template-rows: 100px 200xp 400xp 100px;
            grid-template-columns: repeat(3, 1fr) 200px;
            grid-template-rows: [header-start] 100px [header-end box-start]  200xp [box-end main-start] 400xp [main-end footer-start]  100px  [footer-end];
        Try
            grid-template-rows: 100px 200xp 400xp 100px;
            grid-template-columns: repeat(3, 1fr) 200px;
            grid-template-areas: "head head head head"
                                 "box box box side"
                                 "main main main side"
                                 ". foot foot .";
            note!!! `.` means empty 
    TO implement
        .header {
            grid-area: head
        }


Implicit vs Explicit
    grid-auto-rows
        determines WHAT TO DO with extra items
        makes a new row
    ```grid-auto-flow: columns;
       grid-auto-columns: #fr;```
        instead of making a new row... makes a new column

Alignment
    align
        align-items
            `-items` is for ALL INDIVIDUAL ELEMENTS
            positions along CROSS AXIS; 
            default cross axis is vertical  
    justify
        justify-items
            `-items` is for ALL INDIVIDUAL ELEMENTS
            positions along MAIN AXIS; 
            default main axis is horizontal  


    -self
        ONLY for individual grid item ... NOT FOR containers    
        Allows to override the `-items` positions

    -contents
        ONLY for GROUP OF GRID ITEMS

Alignment Tracks

    -contents
        ONLY for GROUP OF GRID ITEMS
        re-aligns tracks for desired effect


    commands
        center
        start
        end
        space-between
        space-around
        space-evenly

    grid-auto-flow
        dense
            REORDERS the numerical order of items TO ENSURE all space taken

-content commands  
    instead of 1fr....
        max-content 
            adjust row/column to fit all `content` / text IN ONE LINE!!!!!
        min-content 
            adjust row/column to fit all `content` / text TO ABSOLUTE MINIMUM IN A MULTI-LINE!!!!!
        
minmax
    establish minimum and maximum dimensions
    best used with max/min-content
    minmax(140px, min-content)
        ensures never shrinks more than 140px...
        after that... ensures minimum space taken in a multiline <p>

